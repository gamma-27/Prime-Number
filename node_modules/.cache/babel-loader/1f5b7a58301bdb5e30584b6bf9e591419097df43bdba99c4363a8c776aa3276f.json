{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n\n// const Index = () => {\n//   const [startRange, setStartRange] = useState();\n//   const [endRange, setEndRange] = useState();\n//   const [algorithmType, setAlgorithmType] = useState('');\n//   const [primeCount, setPrimeCount] = useState(0);\n//   const [primeRecords, setPrimeRecords] = useState([]);\n//   const [loading, setLoading] = useState(false); // State to manage loading\n\n//   const navigate = useNavigate();\n\n//   console.log(startRange);\n//   console.log(endRange);\n\n//   // Function to fetch prime numbers from the backend\n//   const fetchPrimeNumbers = async () => {\n//     try {\n//       setLoading(true); // Set loading to true while fetching\n//       const response = await axios.post('http://localhost:3001/api/data', {\n//         start: startRange ,\n//         end: endRange,\n//         algorithm: algorithmType,\n\n//       });\n//       console.log(response); // Log the response for debugging\n//       setLoading(false); // Set loading to false after fetching\n//       setPrimeCount(response.data.numPrimes); // Update prime count\n//       console.log(response.data);\n//       setPrimeRecords(response.data.primes); // Update prime records\n//     } catch (error) {\n//       console.error('Error fetching prime numbers:', error);\n//       setLoading(false); // Set loading to false in case of error\n//     }\n//   };\n\n//   // Function to handle navigation to prime number records page\n//   const handleRedirect = () => {\n//     navigate('/database');\n//   };\n\n//   // JSX for rendering UI\n//   return (\n//     <div>\n//       <div className=\"container bg-purple-50 mx-auto\">\n//         <form className=\"mb-8\">\n//           <div className='text-black shadow-xs font-bold py-5  text-2xl text-center'>Prime Number Generator</div>\n//           <div className=\"mb-4 mr-4 text-center\">\n//             <label className='font-semibold mr-5'>Enter the starting range:</label>\n//             <input type=\"number\" name=\"start\" value={startRange} onChange={(e) => setStartRange(e.target.value)} className=\"border border-gray-300 rounded-md p-2 ml-2\" />\n//           </div>\n//           <div className=\"mb-4 mr-4 text-center\">\n//             <label className='font-semibold mr-7'>Enter the ending range:</label>\n//             <input type=\"number\" name=\"end\" value={endRange} onChange={(e) => setEndRange(e.target.value)} className=\"border border-gray-300 rounded-md p-2 ml-2\" />\n//           </div>\n//           <div className=\"mb-4 mr-4 text-center\">\n//             <label className='font-semibold mr-5'>Enter the algorithm type:</label>\n//             <input type=\"text\" name=\"algorithm\" value={algorithmType} onChange={(e) => setAlgorithmType(e.target.value)} className=\"border border-gray-300 rounded-md p-2 ml-2\" />\n//           </div>\n//           <div className=\"flex justify-center mt-5 items-center\">\n//             <button type=\"button\" onClick={fetchPrimeNumbers} className=\"bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 rounded\">\n//               {loading ? 'Loading...' : 'Generate'}\n//             </button>\n//           </div>\n//         </form>\n//         <div className='border text-center font-normal text-white pl-1 pb-2 justify-center bg-purple-500'>\n//           {/* Display prime numbers based on current startRange and endRange */}\n//           <h2 className=\"text-xl font-semibold text-white pt-5\">Prime numbers between {startRange} and {endRange} are</h2>\n//           <p className=\" text-xl font-semibold text-white\">Algorithm used: {algorithmType} </p>\n//           <p className=\"mb-2 text-xl font-semibold text-white\">Count of prime numbers: {primeCount}</p>\n//           {/* Display prime numbers */}\n//           {primeRecords.length > 0 && (\n//             <ul>\n//               {primeRecords.map((prime, index) => (\n//                 <li key={index}>{prime}</li>\n//               ))}\n//             </ul>\n//           )}\n//         </div>\n//         <div className='flex justify-center items-center my-5'>\n//           {/* Button to navigate to prime number records page */}\n//           <button type=\"button\" className=' bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 rounded' onClick={handleRedirect}>\n//             Prime Number Records\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Index;","map":{"version":3,"names":[],"sources":["D:/hellow/client/src/components/index.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const Index = () => {\r\n//   const [startRange, setStartRange] = useState();\r\n//   const [endRange, setEndRange] = useState();\r\n//   const [algorithmType, setAlgorithmType] = useState('');\r\n//   const [primeCount, setPrimeCount] = useState(0);\r\n//   const [primeRecords, setPrimeRecords] = useState([]);\r\n//   const [loading, setLoading] = useState(false); // State to manage loading\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   console.log(startRange);\r\n//   console.log(endRange);\r\n\r\n//   // Function to fetch prime numbers from the backend\r\n//   const fetchPrimeNumbers = async () => {\r\n//     try {\r\n//       setLoading(true); // Set loading to true while fetching\r\n//       const response = await axios.post('http://localhost:3001/api/data', {\r\n//         start: startRange ,\r\n//         end: endRange,\r\n//         algorithm: algorithmType,\r\n\r\n//       });\r\n//       console.log(response); // Log the response for debugging\r\n//       setLoading(false); // Set loading to false after fetching\r\n//       setPrimeCount(response.data.numPrimes); // Update prime count\r\n//       console.log(response.data);\r\n//       setPrimeRecords(response.data.primes); // Update prime records\r\n//     } catch (error) {\r\n//       console.error('Error fetching prime numbers:', error);\r\n//       setLoading(false); // Set loading to false in case of error\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle navigation to prime number records page\r\n//   const handleRedirect = () => {\r\n//     navigate('/database');\r\n//   };\r\n\r\n//   // JSX for rendering UI\r\n//   return (\r\n//     <div>\r\n//       <div className=\"container bg-purple-50 mx-auto\">\r\n//         <form className=\"mb-8\">\r\n//           <div className='text-black shadow-xs font-bold py-5  text-2xl text-center'>Prime Number Generator</div>\r\n//           <div className=\"mb-4 mr-4 text-center\">\r\n//             <label className='font-semibold mr-5'>Enter the starting range:</label>\r\n//             <input type=\"number\" name=\"start\" value={startRange} onChange={(e) => setStartRange(e.target.value)} className=\"border border-gray-300 rounded-md p-2 ml-2\" />\r\n//           </div>\r\n//           <div className=\"mb-4 mr-4 text-center\">\r\n//             <label className='font-semibold mr-7'>Enter the ending range:</label>\r\n//             <input type=\"number\" name=\"end\" value={endRange} onChange={(e) => setEndRange(e.target.value)} className=\"border border-gray-300 rounded-md p-2 ml-2\" />\r\n//           </div>\r\n//           <div className=\"mb-4 mr-4 text-center\">\r\n//             <label className='font-semibold mr-5'>Enter the algorithm type:</label>\r\n//             <input type=\"text\" name=\"algorithm\" value={algorithmType} onChange={(e) => setAlgorithmType(e.target.value)} className=\"border border-gray-300 rounded-md p-2 ml-2\" />\r\n//           </div>\r\n//           <div className=\"flex justify-center mt-5 items-center\">\r\n//             <button type=\"button\" onClick={fetchPrimeNumbers} className=\"bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 rounded\">\r\n//               {loading ? 'Loading...' : 'Generate'}\r\n//             </button>\r\n//           </div>\r\n//         </form>\r\n//         <div className='border text-center font-normal text-white pl-1 pb-2 justify-center bg-purple-500'>\r\n//           {/* Display prime numbers based on current startRange and endRange */}\r\n//           <h2 className=\"text-xl font-semibold text-white pt-5\">Prime numbers between {startRange} and {endRange} are</h2>\r\n//           <p className=\" text-xl font-semibold text-white\">Algorithm used: {algorithmType} </p>\r\n//           <p className=\"mb-2 text-xl font-semibold text-white\">Count of prime numbers: {primeCount}</p>\r\n//           {/* Display prime numbers */}\r\n//           {primeRecords.length > 0 && (\r\n//             <ul>\r\n//               {primeRecords.map((prime, index) => (\r\n//                 <li key={index}>{prime}</li>\r\n//               ))}\r\n//             </ul>\r\n//           )}\r\n//         </div>\r\n//         <div className='flex justify-center items-center my-5'>\r\n//           {/* Button to navigate to prime number records page */}\r\n//           <button type=\"button\" className=' bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 rounded' onClick={handleRedirect}>\r\n//             Prime Number Records\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Index;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}